#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_nonuniform_qualifier : require
#include "Platform.glsl"
#include "common/Const_Func.glsl"
#include "common/Material.glsl"
#include "common/UniformBufferObject.glsl"
#include "common/Random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1) buffer AmbientCubeArray { AmbientCube[] Cubes; };
layout(binding = 2) readonly buffer LightObjectArray { LightObject[] Lights; };
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 4) readonly buffer VertexArray { float Vertices[]; };
layout(binding = 5) readonly buffer IndexArray { uint Indices[]; };
layout(binding = 6) readonly buffer MaterialArray { Material[] Materials; };
layout(binding = 7) readonly buffer OffsetArray { uvec2[] Offsets; };
layout(binding = 8) readonly buffer NodeProxyArray { NodeProxy[] NodeProxies; };
layout(binding = 9) readonly buffer HDRSHArray { SphericalHarmonics[] HDRSHs; };

layout(set = 1, binding = 0) uniform sampler2D TextureSamplers[];

layout(push_constant) uniform PushConsts {
    uint globalOffset;
    uint unitSize;
} pushConsts;

#include "common/RTSimple.glsl"
#include "common/AmbientCube.glsl"
#include "common/SampleIBL.glsl"

#if DESKTOP
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
#else
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
#endif


// return if hits, this function may differ between Shader & Cpp
bool TracingFunction(in vec3 origin, in vec3 rayDir, out vec3 OutNormal, out uint OutMaterialId, out float OutRayDist)
{
    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, Scene, gl_RayFlagsNoneEXT, 0xFF, origin.xyz, EPS, rayDir, 10.0f);

    while( rayQueryProceedEXT(rayQuery) )
    {

    }

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT  ) {
        const bool IsCommitted = true;
        const int InstCustIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, IsCommitted);
        const float RayDist = rayQueryGetIntersectionTEXT(rayQuery, IsCommitted);
        const mat4x3 WorldToObject = rayQueryGetIntersectionWorldToObjectEXT(rayQuery, IsCommitted);
        const vec2 TwoBaryCoords = rayQueryGetIntersectionBarycentricsEXT(rayQuery, IsCommitted);
        const int PrimitiveIndex = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, IsCommitted);
        const int InstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, IsCommitted);
        OutRayDist = RayDist;

        vec2 OutTexcoord;
        uint OutInstanceId;
        SimpleHit(InstCustIndex, WorldToObject, TwoBaryCoords, PrimitiveIndex, InstanceID, OutNormal, OutTexcoord, OutMaterialId, OutInstanceId);
        return true;
    }

    return false;
}

int TraceShadow(vec3 origin, vec3 lightPos)
{
    if( !Camera.HasSun )
    {
        return 0;
    }
    return TracingOccludeFunction(origin, lightPos);
}

vec4 TraceOcclusion(inout uvec4 RandomSeed, vec3 origin, vec3 basis, inout int activeProbe)
{
    float occlusion = 0.0;
    float hitDist = 0.0;
    float hitCount = 0.000001;
    vec3 rayColor = vec3(0.0);

    // Generate a random angle for z-axis rotation
    float randAngle = RandomFloat(RandomSeed) * M_TWO_PI;
    float cosTheta = cos(randAngle);
    float sinTheta = sin(randAngle);
    float skyMultiplier = Camera.HasSky ? Camera.SkyIntensity : 0.0f;
    
    for( uint i = 0; i < FACE_TRACING; i++ )
    {
        vec3 hemiVec = hemisphereVectors[i];

        // Apply rotation around z-axis
        vec3 rotatedVec = vec3(
        hemiVec.x * cosTheta - hemiVec.y * sinTheta,
        hemiVec.x * sinTheta + hemiVec.y * cosTheta,
        hemiVec.z
        );

        // Align with the surface normal
        vec3 rayDir = AlignWithNormal(rotatedVec, basis);
        
        vec3 OutNormal;
        uint OutMaterialId;
        float OutRayDist;
        if( TracingFunction(origin, rayDir, OutNormal, OutMaterialId, OutRayDist) )
        {
            if( dot(OutNormal, rayDir) < 0.0 )
            {
                // 这里，就命中了表面，需要反弹。反弹只发生一次
                // 因此，如果命中的表面，没有直接光照，这里的rayColor会是黑的
                // 但如果考虑反弹，这里没有直接光照的面，也应该可以贡献光照，可以考虑从以前的buffer里取
                vec3 hitPos = origin + rayDir * OutRayDist;
                const Material material = Materials[OutMaterialId];

                // 这里取出直接光照信息，信息是前一个pass生成的，包含最近一个probe的天光遮蔽，方向光，其他光源的亮度归一化信息
                vec3 localPos = (hitPos - CUBE_OFFSET) / CUBE_UNIT;
                vec3 jit = (RandomFloat3(RandomSeed) - vec3(0.5f)) * CUBE_UNIT;
                vec4 indirectLight = material.Diffuse * interpolateDIProbes(localPos + jit, OutNormal);
                rayColor += indirectLight.rgb;
            }
            else
            {
                // 这里，命中了背面，说明这个probe位于几何体内部，如果hitDist小于probe的间隔，可以考虑将probe推到表面，再次发出
                hitDist = 0.0;
                hitCount = 1;
                activeProbe = 0;
                break;
            }
        }
        else
        {
            
        }
    }
    rayColor = rayColor / float(FACE_TRACING);
    vec4 indirectColor = vec4(rayColor, 1.0);
    return indirectColor;
}

void main() {
    uint gIdx = gl_GlobalInvocationID.x + pushConsts.globalOffset;
    
    // convert to local position
    uint y = gIdx / (CUBE_SIZE_XY * CUBE_SIZE_XY);
    uint z = (gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY) / CUBE_SIZE_XY;
    uint x = gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY - z * CUBE_SIZE_XY;

    uvec4 RandomSeed = InitRandomSeed(x + y, y + z, Camera.TotalFrames);
    vec3 origin = vec3(x, y, z) * CUBE_UNIT + CUBE_OFFSET;
    
    int activeProbe = 1;
    Cubes[gIdx].PosY = LerpPackedColorAlt(Cubes[gIdx].PosY, TraceOcclusion(RandomSeed, origin, vec3(0,1,0), activeProbe),  0.125);
    Cubes[gIdx].NegY = LerpPackedColorAlt(Cubes[gIdx].NegY, TraceOcclusion(RandomSeed, origin, vec3(0,-1,0), activeProbe), 0.125);
    Cubes[gIdx].PosX = LerpPackedColorAlt(Cubes[gIdx].PosX, TraceOcclusion(RandomSeed, origin, vec3(1,0,0), activeProbe),  0.125);
    Cubes[gIdx].NegX = LerpPackedColorAlt(Cubes[gIdx].NegX, TraceOcclusion(RandomSeed, origin, vec3(-1,0,0), activeProbe), 0.125);
    Cubes[gIdx].PosZ = LerpPackedColorAlt(Cubes[gIdx].PosZ, TraceOcclusion(RandomSeed, origin, vec3(0,0,1), activeProbe),  0.125);
    Cubes[gIdx].NegZ = LerpPackedColorAlt(Cubes[gIdx].NegZ, TraceOcclusion(RandomSeed, origin, vec3(0,0,-1), activeProbe), 0.125);

//    Cubes[gIdx].PosY = Cubes[gIdx].PosY_D;
//    Cubes[gIdx].NegY = Cubes[gIdx].NegY_D;
//    Cubes[gIdx].PosX = Cubes[gIdx].PosX_D;
//    Cubes[gIdx].NegX = Cubes[gIdx].NegX_D;
//    Cubes[gIdx].PosZ = Cubes[gIdx].PosZ_D;
//    Cubes[gIdx].NegZ = Cubes[gIdx].NegZ_D;
    
//  Cubes[gIdx].Info.x = activeProbe;
}
