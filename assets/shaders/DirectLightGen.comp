#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_nonuniform_qualifier : require
#include "Platform.glsl"
#include "common/Const_Func.glsl"
#include "common/Material.glsl"
#include "common/UniformBufferObject.glsl"
#include "common/Random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1) buffer AmbientCubeArray { AmbientCube[] Cubes; };
layout(binding = 2) readonly buffer LightObjectArray { LightObject[] Lights; };
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 4) readonly buffer VertexArray { float Vertices[]; };
layout(binding = 5) readonly buffer IndexArray { uint Indices[]; };
layout(binding = 6) readonly buffer MaterialArray { Material[] Materials; };
layout(binding = 7) readonly buffer OffsetArray { uvec2[] Offsets; };
layout(binding = 8) readonly buffer NodeProxyArray { NodeProxy[] NodeProxies; };
layout(binding = 9) readonly buffer HDRSHArray { SphericalHarmonics[] HDRSHs; };

layout(set = 1, binding = 0) uniform sampler2D TextureSamplers[];

layout(push_constant) uniform PushConsts {
    uint globalOffset;
    uint cascade;
} pushConsts;

#include "common/RTSimple.glsl"
#include "common/AmbientCubeCommon.glsl"
#include "common/SampleIBL.glsl"

#if DESKTOP
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
#else
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
#endif

AmbientCube FetchCube(ivec3 probePos)
{
    int idx = probePos.y * CUBE_SIZE_XY * CUBE_SIZE_XY +
    probePos.z * CUBE_SIZE_XY + probePos.x;
    return Cubes[idx];
}

vec4 interpolateDIProbes(vec3 pos, vec3 normal) {
    // Early out if position is outside the probe grid
    if (pos.x < 0 || pos.y < 0 || pos.z < 0 ||
    pos.x > CUBE_SIZE_XY - 1 || pos.y > CUBE_SIZE_Z - 1 || pos.z > CUBE_SIZE_XY - 1) {
        return vec4(1.0);
    }

    // Get the base indices and fractional positions
    ivec3 baseIdx = ivec3(floor(pos));
    vec3 frac = fract(pos);

    // Trilinear interpolation between 8 nearest probes
    // Try immediate neighbors first
    float totalWeight = 0.0;
    vec4 result = vec4(0.0);

    for (int i = 0; i < 8; i++) {
        ivec3 offset = ivec3(
        i & 1,
        (i >> 1) & 1,
        (i >> 2) & 1
        );

        ivec3 probePos = baseIdx + offset;
        AmbientCube cube = FetchCube(probePos);
        if (cube.Active != 1) continue;

        float wx = offset.x == 0 ? (1.0 - frac.x) : frac.x;
        float wy = offset.y == 0 ? (1.0 - frac.y) : frac.y;
        float wz = offset.z == 0 ? (1.0 - frac.z) : frac.z;
        float weight = wx * wy * wz;

        vec4 sampleColor = sampleAmbientCubeHL2_DI(cube, normal);
        result += sampleColor * weight;
        totalWeight += weight;
    }

    // up cascade
    if(totalWeight <= 0.0) {
        baseIdx = baseIdx - ivec3(1,1,1);
        for (int i = 0; i < 8; i++) {
            ivec3 offset = ivec3(
            i & 1,
            (i >> 1) & 1,
            (i >> 2) & 1
            );

            ivec3 probePos = baseIdx + offset * 3;
            AmbientCube cube = FetchCube(probePos);
            if (cube.Active != 1) continue;

            float wx = offset.x == 0 ? (1.0 - frac.x) : frac.x;
            float wy = offset.y == 0 ? (1.0 - frac.y) : frac.y;
            float wz = offset.z == 0 ? (1.0 - frac.z) : frac.z;
            float weight = wx * wy * wz;

            vec4 sampleColor = sampleAmbientCubeHL2_DI(cube, normal);
            result += sampleColor * weight;
            totalWeight += weight;
        }
    }

    // Normalize result by total weight
    vec4 indirectColor = totalWeight > 0.0 ? result / totalWeight : vec4(0.05);
    return indirectColor;
}


uint FetchMaterialId(uint MaterialIdx, uint InstanceId)
{
    return MaterialIdx;
}

vec4 FetchDirectLight(vec3 hitPos, vec3 OutNormal, uint OutMaterialId, uint OutInstanceId)
{
    const Material material = Materials[OutMaterialId];
    vec3 localPos = (hitPos - (pushConsts.cascade == 0 ? CUBE_OFFSET : CUBE_OFFSET_FAR)) / (pushConsts.cascade == 0 ? CUBE_UNIT : CUBE_UNIT_FAR);
    return material.Diffuse * interpolateDIProbes(localPos, OutNormal);
}

LightObject FetchLight(uint lightIdx, inout vec4 lightPower)
{
    lightPower = Materials[Lights[lightIdx].lightMatIdx].Diffuse;
    return Lights[lightIdx];
}

#include "common/AmbientCubeAlgo.glsl"

void main() {
    uint gIdx = gl_GlobalInvocationID.x + pushConsts.globalOffset;

    // convert to local position
    uint y = gIdx / (CUBE_SIZE_XY * CUBE_SIZE_XY);
    uint z = (gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY) / CUBE_SIZE_XY;
    uint x = gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY - z * CUBE_SIZE_XY;

    uvec4 RandomSeed = InitRandomSeed(x + y, y + z, Camera.TotalFrames);
    vec3 origin = vec3(x, y, z) * (pushConsts.cascade == 0 ? CUBE_UNIT : CUBE_UNIT_FAR) + (pushConsts.cascade == 0 ? CUBE_OFFSET : CUBE_OFFSET_FAR);

    uint activeProbe = 1;
    uint activeOut = 1;
    uint matId = 0;
    
    vec4 bounceColor = vec4(0.0);
    vec4 skyColor = vec4(0.0);
    vec4 directColor = vec4(0.0);

    vec3 offset = vec3(0.0);
    bool Inside = IsInside( origin, offset, matId);

    Cubes[gIdx].ExtInfo2 = Cubes[gIdx].ExtInfo2 + 1;

    if (Inside)
    {
        origin = origin + offset;
        activeOut = 0;
    }

    float lerpvalue = max(0.04, 1.0 / Cubes[gIdx].ExtInfo2);
    
    if(activeOut != 0)
    {
        directColor = TraceOcclusion( Cubes[gIdx].ExtInfo2, origin, vec3(0,1,0), activeProbe, matId, bounceColor, skyColor, Camera);
        Cubes[gIdx].PosY_D = LerpPackedColorAlt(Cubes[gIdx].PosY_D, directColor, 0.25);
        Cubes[gIdx].PosY = LerpPackedColorAlt(Cubes[gIdx].PosY, bounceColor, lerpvalue);
        Cubes[gIdx].PosY_S = LerpPackedColorAlt(Cubes[gIdx].PosY_S, skyColor, lerpvalue);
        activeOut *= activeProbe;

        directColor = TraceOcclusion(Cubes[gIdx].ExtInfo2, origin, vec3(0,-1,0), activeProbe, matId, bounceColor, skyColor, Camera);
        Cubes[gIdx].NegY_D = LerpPackedColorAlt(Cubes[gIdx].NegY_D, directColor, 0.25);
        Cubes[gIdx].NegY = LerpPackedColorAlt(Cubes[gIdx].NegY, bounceColor, lerpvalue);
        Cubes[gIdx].NegY_S = LerpPackedColorAlt(Cubes[gIdx].NegY_S, skyColor, lerpvalue);
        activeOut *= activeProbe;

        directColor = TraceOcclusion(Cubes[gIdx].ExtInfo2, origin, vec3(1,0,0), activeProbe, matId, bounceColor, skyColor, Camera);
        Cubes[gIdx].PosX_D = LerpPackedColorAlt(Cubes[gIdx].PosX_D, directColor, 0.25);
        Cubes[gIdx].PosX = LerpPackedColorAlt(Cubes[gIdx].PosX, bounceColor, lerpvalue);
        Cubes[gIdx].PosX_S = LerpPackedColorAlt(Cubes[gIdx].PosX_S, skyColor, lerpvalue);
        activeOut *= activeProbe;

        directColor = TraceOcclusion(Cubes[gIdx].ExtInfo2, origin, vec3(-1,0,0), activeProbe, matId, bounceColor, skyColor, Camera);
        Cubes[gIdx].NegX_D = LerpPackedColorAlt(Cubes[gIdx].NegX_D, directColor, 0.25);
        Cubes[gIdx].NegX = LerpPackedColorAlt(Cubes[gIdx].NegX, bounceColor, lerpvalue);
        Cubes[gIdx].NegX_S = LerpPackedColorAlt(Cubes[gIdx].NegX_S, skyColor, lerpvalue);
        activeOut *= activeProbe;

        directColor = TraceOcclusion(Cubes[gIdx].ExtInfo2, origin, vec3(0,0,1), activeProbe, matId, bounceColor, skyColor, Camera);
        Cubes[gIdx].PosZ_D = LerpPackedColorAlt(Cubes[gIdx].PosZ_D, directColor, 0.25);
        Cubes[gIdx].PosZ = LerpPackedColorAlt(Cubes[gIdx].PosZ, bounceColor, lerpvalue);
        Cubes[gIdx].PosZ_S = LerpPackedColorAlt(Cubes[gIdx].PosZ_S, skyColor, lerpvalue);
        activeOut *= activeProbe;

        directColor = TraceOcclusion(Cubes[gIdx].ExtInfo2, origin, vec3(0,0,-1), activeProbe, matId, bounceColor, skyColor, Camera);
        Cubes[gIdx].NegZ_D = LerpPackedColorAlt(Cubes[gIdx].NegZ_D, directColor, 0.25);
        Cubes[gIdx].NegZ = LerpPackedColorAlt(Cubes[gIdx].NegZ, bounceColor, lerpvalue);
        Cubes[gIdx].NegZ_S = LerpPackedColorAlt(Cubes[gIdx].NegZ_S, skyColor, lerpvalue);
        activeOut *= activeProbe;
    }

    Cubes[gIdx].Active = activeOut;
    Cubes[gIdx].ExtInfo3 = activeOut;
    Cubes[gIdx].ExtInfo1 = matId;
}