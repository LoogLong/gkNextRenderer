#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_nonuniform_qualifier : require
#include "Platform.glsl"
#include "common/Const_Func.glsl"
#include "common/Material.glsl"
#include "common/UniformBufferObject.h"
#include "common/Random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1) buffer AmbientCubeArray { AmbientCube[] Cubes; };
layout(binding = 2) readonly buffer LightObjectArray { LightObject[] Lights; };
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 4) readonly buffer VertexArray { float Vertices[]; };
layout(binding = 5) readonly buffer IndexArray { uint Indices[]; };
layout(binding = 6) readonly buffer MaterialArray { Material[] Materials; };
layout(binding = 7) readonly buffer OffsetArray { uvec2[] Offsets; };
layout(binding = 8) readonly buffer NodeProxyArray { NodeProxy[] NodeProxies; };
layout(binding = 9) readonly buffer HDRSHArray { SphericalHarmonics[] HDRSHs; };

layout(set = 1, binding = 0) uniform sampler2D TextureSamplers[];

layout(push_constant) uniform PushConsts {
    uint globalOffset;
    uint unitSize;
} pushConsts;

#include "common/RTSimple.glsl"
#include "common/AmbientCube.glsl"
#include "common/SampleIBL.h"

#if DESKTOP
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
#else
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
#endif

// return if hits, this function may differ between Shader & Cpp
bool TracingFunction(in vec3 origin, in vec3 rayDir, out vec3 OutNormal, out uint OutMaterialId, out float OutRayDist)
{
    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, Scene, gl_RayFlagsNoneEXT, 0xFF, origin.xyz, EPS, rayDir, 10.0f);

    while( rayQueryProceedEXT(rayQuery) )
    {

    }

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT  ) {
        const bool IsCommitted = true;
        const int InstCustIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, IsCommitted);
        const float RayDist = rayQueryGetIntersectionTEXT(rayQuery, IsCommitted);
        const mat4x3 WorldToObject = rayQueryGetIntersectionWorldToObjectEXT(rayQuery, IsCommitted);
        const vec2 TwoBaryCoords = rayQueryGetIntersectionBarycentricsEXT(rayQuery, IsCommitted);
        const int PrimitiveIndex = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, IsCommitted);
        const int InstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, IsCommitted);
        OutRayDist = RayDist;

        vec2 OutTexcoord;
        uint OutInstanceId;
        SimpleHit(InstCustIndex, WorldToObject, TwoBaryCoords, PrimitiveIndex, InstanceID, OutNormal, OutTexcoord, OutMaterialId, OutInstanceId);
        return true;
    }

    return false;
}

int TraceShadow(vec3 origin, vec3 lightPos)
{
    if( !Camera.HasSun )
    {
        return 0;
    }
    return TracingOccludeFunction(origin, lightPos);
}

vec4 TraceOcclusion(inout uvec4 RandomSeed, vec3 origin, vec3 basis, inout int activeProbe, inout vec4 bounceColor, inout vec4 skyColor)
{
    float occlusion = 0.0;
    float hitDist = 0.0;
    float hitCount = 0.000001;
    vec3 rayColor = vec3(0.0);
    bounceColor = vec4(0.0);
    skyColor = vec4(0.0);

    // Generate a random angle for z-axis rotation
    float randAngle = RandomFloat(RandomSeed) * M_TWO_PI;
    float cosTheta = cos(randAngle);
    float sinTheta = sin(randAngle);
    float skyMultiplier = Camera.HasSky ? Camera.SkyIntensity : 0.0f;

    for( uint i = 0; i < FACE_TRACING; i++ )
    {
        #if HIGH_QUALITY
        vec3 hemiVec = hemisphereVectors32[i];
        #else
        vec3 hemiVec = hemisphereVectors16[i];
        #endif

        // Apply rotation around z-axis
        vec3 rotatedVec = vec3(
        hemiVec.x * cosTheta - hemiVec.y * sinTheta,
        hemiVec.x * sinTheta + hemiVec.y * cosTheta,
        hemiVec.z
        );

        // Align with the surface normal
        vec3 rayDir = AlignWithNormal(rotatedVec, basis);
        vec3 OutNormal;
        uint OutMaterialId;
        float OutRayDist;
        if( TracingFunction(origin, rayDir, OutNormal, OutMaterialId, OutRayDist) )
        {
            if( dot(OutNormal, rayDir) < 0.0 )
            {
                vec3 hitPos = origin + rayDir * OutRayDist;
                const Material material = Materials[OutMaterialId];
                vec3 localPos = (hitPos - CUBE_OFFSET) / CUBE_UNIT;
                vec3 jit = (RandomFloat3(RandomSeed) - vec3(0.5f)) * CUBE_UNIT;
                vec4 indirectLight = material.Diffuse * interpolateDIProbes(localPos + jit, OutNormal);
                bounceColor.rgb += indirectLight.rgb;
            }
            else
            {
                // 这里，命中了背面，说明这个probe位于几何体内部，如果hitDist小于probe的间隔，可以考虑将probe推到表面，再次发出
                hitDist = 0.0;
                hitCount = 1;
                activeProbe = 0;
                break;
            }
        }
        else
        {
            hitDist += 1000.0;
            hitCount += 1;
            occlusion += 0.0;
            rayColor += SampleIBL(Camera.SkyIdx, rayDir, Camera.SkyRotation, 1.0).rgb * skyMultiplier;
            
        }
    }
    rayColor = rayColor / float(FACE_TRACING);
    skyColor.rgb = rayColor;
    bounceColor.rgb = bounceColor.rgb / float(FACE_TRACING);

    if(Camera.LightCount > 0)
    {
        vec3 lightPos = mix(Lights[0].p1.rgb, Lights[0].p3.rgb, 0.5f);

        //AmbientCube cube = FetchCube(cubePos);
        float lightAtten = TracingOccludeFunction(origin, lightPos);

        vec3 lightDir = normalize(lightPos - origin);
        float ndotl = clamp(dot(basis, lightDir), 0.0f, 1.0f);
        float distance = length(lightPos - origin);
        float attenuation = 1.0f / (distance * distance);
        rayColor += vec3(2000.0f, 2000.0f, 2000.0f) * ndotl * attenuation * lightAtten;
    }

    float sunAtten = TracingOccludeFunction(origin, origin + Camera.SunDirection.xyz * 1000.0);
    float ndotl = clamp(dot(basis, Camera.SunDirection.xyz), 0.0f, 1.0f);
    rayColor += Camera.SunColor.xyz * sunAtten * ndotl * (Camera.HasSun ? 1.0f : 0.0f) * 0.25f;

    float avgDist = hitDist / hitCount;
    vec4 indirectColor = vec4(rayColor, avgDist);
    return indirectColor;
}

void main() {
    uint gIdx = gl_GlobalInvocationID.x + pushConsts.globalOffset;

    // convert to local position
    uint y = gIdx / (CUBE_SIZE_XY * CUBE_SIZE_XY);
    uint z = (gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY) / CUBE_SIZE_XY;
    uint x = gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY - z * CUBE_SIZE_XY;

    uvec4 RandomSeed = InitRandomSeed(x + y, y + z, Camera.TotalFrames);
    vec3 origin = vec3(x, y, z) * CUBE_UNIT + CUBE_OFFSET;

    int activeProbe = 1;
    
    vec4 bounceColor = vec4(0.0);
    vec4 skyColor = vec4(0.0);
    vec4 directColor = vec4(0.0);
    directColor = TraceOcclusion(RandomSeed, origin, vec3(0,1,0), activeProbe, bounceColor, skyColor);
    Cubes[gIdx].PosY_D = LerpPackedColorAlt(Cubes[gIdx].PosY_D, directColor, 0.25);
    Cubes[gIdx].PosY = LerpPackedColorAlt(Cubes[gIdx].PosY, bounceColor, 0.125);
    Cubes[gIdx].PosY_S = LerpPackedColorAlt(Cubes[gIdx].PosY_S, skyColor, 0.125);
    
    directColor = TraceOcclusion(RandomSeed, origin, vec3(0,-1,0), activeProbe, bounceColor, skyColor);
    Cubes[gIdx].NegY_D = LerpPackedColorAlt(Cubes[gIdx].NegY_D, directColor, 0.25);
    Cubes[gIdx].NegY = LerpPackedColorAlt(Cubes[gIdx].NegY, bounceColor, 0.125);
    Cubes[gIdx].NegY_S = LerpPackedColorAlt(Cubes[gIdx].NegY_S, skyColor, 0.125);
    
    directColor = TraceOcclusion(RandomSeed, origin, vec3(1,0,0), activeProbe, bounceColor, skyColor);
    Cubes[gIdx].PosX_D = LerpPackedColorAlt(Cubes[gIdx].PosX_D, directColor, 0.25);
    Cubes[gIdx].PosX = LerpPackedColorAlt(Cubes[gIdx].PosX, bounceColor, 0.125);
    Cubes[gIdx].PosX_S = LerpPackedColorAlt(Cubes[gIdx].PosX_S, skyColor, 0.125);
    
    directColor = TraceOcclusion(RandomSeed, origin, vec3(-1,0,0), activeProbe, bounceColor, skyColor);
    Cubes[gIdx].NegX_D = LerpPackedColorAlt(Cubes[gIdx].NegX_D, directColor, 0.25);
    Cubes[gIdx].NegX = LerpPackedColorAlt(Cubes[gIdx].NegX, bounceColor, 0.125);
    Cubes[gIdx].NegX_S = LerpPackedColorAlt(Cubes[gIdx].NegX_S, skyColor, 0.125);
    
    directColor = TraceOcclusion(RandomSeed, origin, vec3(0,0,1), activeProbe, bounceColor, skyColor);
    Cubes[gIdx].PosZ_D = LerpPackedColorAlt(Cubes[gIdx].PosZ_D, directColor, 0.25);
    Cubes[gIdx].PosZ = LerpPackedColorAlt(Cubes[gIdx].PosZ, bounceColor, 0.125);
    Cubes[gIdx].PosZ_S = LerpPackedColorAlt(Cubes[gIdx].PosZ_S, skyColor, 0.125);
    
    directColor = TraceOcclusion(RandomSeed, origin, vec3(0,0,-1), activeProbe, bounceColor, skyColor);
    Cubes[gIdx].NegZ_D = LerpPackedColorAlt(Cubes[gIdx].NegZ_D, directColor, 0.25);
    Cubes[gIdx].NegZ = LerpPackedColorAlt(Cubes[gIdx].NegZ, bounceColor, 0.125);
    Cubes[gIdx].NegZ_S = LerpPackedColorAlt(Cubes[gIdx].NegZ_S, skyColor, 0.125);

    Cubes[gIdx].Info.x = activeProbe;
}