#version 460
#extension GL_GOOGLE_include_directive: require
#include "Platform.glsl"
#include "common/UniformBufferObject.h"
#include "common/Const_Func.glsl"
#include "common/ColorFunc.glsl"

layout (binding = 0, rgba16f) uniform image2D NewSourceImage;
layout (binding = 1, rgba16f) uniform image2D AccumulateImage;
layout (binding = 2, rgba16f) uniform image2D Accumulate1Image;
layout (binding = 3, rg32f) uniform image2D MotionVectorImage;
layout (binding = 4) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };

layout (binding = 5, r32ui) uniform uimage2D VisibilityBuffer;
layout (binding = 6, r32ui) uniform uimage2D Visibility1Buffer;
layout (binding = 7, rgba8) uniform image2D OutImage;

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

uint FetchPrimitiveIndex(in uint InstanceID)
{
    return InstanceID;
}

bool EdgeDetect(in uint current_primitive_index, in ivec2 ipos)
{
    uint center = FetchPrimitiveIndex(current_primitive_index);

    uint prev_primitive_index0 = FetchPrimitiveIndex(imageLoad(VisibilityBuffer, ipos + ivec2(2, 0)).r);
    uint prev_primitive_index1 = FetchPrimitiveIndex(imageLoad(VisibilityBuffer, ipos + ivec2(-2, 0)).r);
    uint prev_primitive_index2 = FetchPrimitiveIndex(imageLoad(VisibilityBuffer, ipos + ivec2(0, 2)).r);
    uint prev_primitive_index3 = FetchPrimitiveIndex(imageLoad(VisibilityBuffer, ipos + ivec2(0, -2)).r);

    bool edge0 = any(notEqual(uvec4(prev_primitive_index0, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(center)));
    bool edge1 = any(equal(uvec4(prev_primitive_index0, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(center)));

    return edge0 && edge1;
}

const vec2 offsets5x5[25] = vec2[25](
vec2(-2.0, -2.0), vec2(-1.0, -2.0), vec2(0.0, -2.0), vec2(1.0, -2.0), vec2(2.0, -2.0),
vec2(-2.0, -1.0), vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0), vec2(2.0, -1.0),
vec2(-2.0, 0.0), vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(2.0, 0.0),
vec2(-2.0, 1.0), vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0), vec2(2.0, 1.0),
vec2(-2.0, 2.0), vec2(-1.0, 2.0), vec2(0.0, 2.0), vec2(1.0, 2.0), vec2(2.0, 2.0)
);

// a simple accumulation shader, reproject can impl here later.
void main() {
    ivec2 ipos = ivec2(gl_GlobalInvocationID.xy) + ivec2(Camera.ViewportRect.x, Camera.ViewportRect.y);

    // More flexible sampling algorithm with dynamic weights
    vec4 src = vec4(0);
    float temporalWeight = 0.0;
    float totalWeight = 0.0;
    
    // Define 3x3 sampling pattern
    const ivec2 offsets[9] = ivec2[9](
        ivec2(0, 0),    // Center
        ivec2(-1, -1),  // Top-left
        ivec2(0, -1),   // Top
        ivec2(1, -1),   // Top-right
        ivec2(-1, 0),   // Left
        ivec2(1, 0),    // Right
        ivec2(-1, 1),   // Bottom-left
        ivec2(0, 1),    // Bottom
        ivec2(1, 1)     // Bottom-right
    );
    
    bool isEvenFrameActual = Camera.TotalFrames % 2 == 0 ? true : false;
    bool useHistory = true;
    vec2 motion = imageLoad(MotionVectorImage, ipos).rg;
    ivec2 previpos = ivec2(floor(ipos + motion));
    const bool inside = all(lessThan(previpos, ivec2(Camera.ViewportRect.xy + Camera.ViewportRect.zw))) && all(greaterThanEqual(previpos, ivec2(Camera.ViewportRect.xy) + ivec2(-1, -1)));
    uint current_primitive_index0 = imageLoad(VisibilityBuffer, ipos).r;
    uint prev_primitive_index0 = imageLoad(Visibility1Buffer, previpos).r;
    const bool changed = current_primitive_index0 != prev_primitive_index0 ? true : false;
    const bool check = (length(motion) > 0.01) ? true : false;



    // Sample all 9 pixels with dynamically determined weights
    for (int i = 0; i < 9; i++) {
        ivec2 samplePos = ipos + offsets[i];
        vec4 samplePixel = imageLoad(NewSourceImage, samplePos);
        uint primitiveIdx = imageLoad(VisibilityBuffer, samplePos).r;
        // Determine weight dynamically
        float weight;
        if (i == 0) {
            // Center pixel typically has higher weight
            weight = 0.4;
            temporalWeight = samplePixel.w;
        } else {
            // Calculate distance-based weight
            float dist = length(offsets[i]);
            weight = 0.6 / (dist * 3.0 + 4.0);

            if( luminance(samplePixel.rgb) > 2.0 )
            {
                weight += 0.2;
            }
            
            if( primitiveIdx != current_primitive_index0 )
            {
                weight = 0.0;
            }

            // Could add other factors here:
            // - Luminance-based weight
            // - Similarity to center pixel
            // - Edge detection
        }

        src += samplePixel * weight;
        totalWeight += weight;
    }

    // Normalize
    src /= totalWeight;

    vec4 final = src;
    
    // fetch visibility to validate the history
    const bool miss = current_primitive_index0 == 65535 ? true : false;
    if (miss || Camera.TotalFrames == 0 || !inside)
    {
        useHistory = false;
    }

    if (useHistory)
    {
        if (!Camera.ProgressiveRender)
        {
            // current 4
            uint current_primitive_index1 = imageLoad(VisibilityBuffer, ipos + ivec2(1, 0)).r;
            uint current_primitive_index2 = imageLoad(VisibilityBuffer, ipos + ivec2(0, 1)).r;
            uint current_primitive_index3 = imageLoad(VisibilityBuffer, ipos + ivec2(1, 1)).r;

            // prev 9
            uint prev_primitive_index1 = imageLoad(Visibility1Buffer, previpos + ivec2(1, 0)).r;
            uint prev_primitive_index2 = imageLoad(Visibility1Buffer, previpos + ivec2(0, 1)).r;
            uint prev_primitive_index3 = imageLoad(Visibility1Buffer, previpos + ivec2(1, 1)).r;
            uint prev_primitive_index4 = imageLoad(Visibility1Buffer, previpos + ivec2(-1, 0)).r;
            uint prev_primitive_index5 = imageLoad(Visibility1Buffer, previpos + ivec2(0, -1)).r;
            uint prev_primitive_index6 = imageLoad(Visibility1Buffer, previpos + ivec2(-1, -1)).r;
            uint prev_primitive_index7 = imageLoad(Visibility1Buffer, previpos + ivec2(1, -1)).r;
            uint prev_primitive_index8 = imageLoad(Visibility1Buffer, previpos + ivec2(-1, 1)).r;


            ivec4 match1 = ivec4(equal(uvec4(prev_primitive_index8, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(current_primitive_index0, current_primitive_index0, current_primitive_index0, current_primitive_index0)));
            ivec4 match2 = ivec4(equal(uvec4(prev_primitive_index4, prev_primitive_index5, prev_primitive_index6, prev_primitive_index7), uvec4(current_primitive_index0, current_primitive_index0, current_primitive_index0, current_primitive_index0)));
            ivec4 match3 = ivec4(equal(uvec4(prev_primitive_index8, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(current_primitive_index1, current_primitive_index1, current_primitive_index1, current_primitive_index1)));
            ivec4 match4 = ivec4(equal(uvec4(prev_primitive_index4, prev_primitive_index5, prev_primitive_index6, prev_primitive_index7), uvec4(current_primitive_index1, current_primitive_index1, current_primitive_index1, current_primitive_index1)));
            ivec4 match5 = ivec4(equal(uvec4(prev_primitive_index8, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(current_primitive_index2, current_primitive_index2, current_primitive_index2, current_primitive_index2)));
            ivec4 match6 = ivec4(equal(uvec4(prev_primitive_index4, prev_primitive_index5, prev_primitive_index6, prev_primitive_index7), uvec4(current_primitive_index2, current_primitive_index2, current_primitive_index2, current_primitive_index2)));
            ivec4 match7 = ivec4(equal(uvec4(prev_primitive_index8, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(current_primitive_index3, current_primitive_index3, current_primitive_index3, current_primitive_index3)));
            ivec4 match8 = ivec4(equal(uvec4(prev_primitive_index4, prev_primitive_index5, prev_primitive_index6, prev_primitive_index7), uvec4(current_primitive_index3, current_primitive_index3, current_primitive_index3, current_primitive_index3)));
            ivec4 match9 = ivec4(equal(uvec4(prev_primitive_index0, prev_primitive_index0, prev_primitive_index0, prev_primitive_index0), uvec4(current_primitive_index0, current_primitive_index1, current_primitive_index2, current_primitive_index3)));

            float sum = dot(match1, ivec4(1, 1, 1, 1));
            sum += dot(match2, ivec4(1, 1, 1, 1));
            sum += dot(match3, ivec4(1, 1, 1, 1));
            sum += dot(match4, ivec4(1, 1, 1, 1));
            sum += dot(match5, ivec4(1, 1, 1, 1));
            sum += dot(match6, ivec4(1, 1, 1, 1));
            sum += dot(match7, ivec4(1, 1, 1, 1));
            sum += dot(match8, ivec4(1, 1, 1, 1));
            sum += dot(match9, ivec4(1, 1, 1, 1));

            bool miss = sum < 4 ? true : false;
            if (miss)
            {
                useHistory = false;
            }
        }

        if (useHistory)
        {
            vec3 historyColor[4];
            historyColor[0] = isEvenFrameActual ? imageLoad(AccumulateImage, previpos).rgb : imageLoad(Accumulate1Image, previpos).rgb;
            historyColor[1] = isEvenFrameActual ? imageLoad(AccumulateImage, previpos + ivec2(1, 0)).rgb : imageLoad(Accumulate1Image, previpos + ivec2(1, 0)).rgb;
            historyColor[2] = isEvenFrameActual ? imageLoad(AccumulateImage, previpos + ivec2(0, 1)).rgb : imageLoad(Accumulate1Image, previpos + ivec2(0, 1)).rgb;
            historyColor[3] = isEvenFrameActual ? imageLoad(AccumulateImage, previpos + ivec2(1, 1)).rgb : imageLoad(Accumulate1Image, previpos + ivec2(1, 1)).rgb;

            vec3 currentColor[25];

            for (int i = 0; i < 25; i++)
            {
                currentColor[i] = imageLoad(NewSourceImage, ipos + ivec2(offsets5x5[i])).rgb;
            }

            vec2 subpixel = fract(vec2(ipos) + motion);
            vec3 history = mix(mix(historyColor[0], historyColor[1], subpixel.x), mix(historyColor[2], historyColor[3], subpixel.x), subpixel.y);

            if (!Camera.ProgressiveRender)
            {
                vec3 AABBMin, AABBMax;
                AABBMax = rgb2ycocg(src.rgb);
                AABBMin = AABBMax;
                // 取得YCoCg色彩空间下，Clip的范围
                for (int k = 0; k < 25; k++)
                {
                    AABBMin = min(AABBMin, rgb2ycocg(currentColor[k]));
                    AABBMax = max(AABBMax, rgb2ycocg(currentColor[k]));
                }
                // 需要 Clip处理的历史数据
                vec3 HistoryYCoCg = rgb2ycocg(history);

                // 简单地进行Clmap
                vec3 ResultYCoCg = clamp(HistoryYCoCg, AABBMin, AABBMax);
                //还原到RGB色彩空间，得到最终结果
                history = ycocg2rgb(ResultYCoCg);
            }

            // judge current gbuffer / object id with prev frame, to deghosting
            float currKeep = temporalWeight / max(1, Camera.TemporalFrames);
            final.rgb = mix(history, src.rgb, clamp(currKeep, 0.0, 1.0));
        }
    }

    if (isEvenFrameActual)
    {
        imageStore(Accumulate1Image, ipos, final);
    }
    else
    {
        imageStore(AccumulateImage, ipos, final);
    }

    if (Camera.ShowEdge)
    {
        uint realInstanceId = FetchPrimitiveIndex(current_primitive_index0);
        if (realInstanceId == Camera.SelectedId)
        {
            if (EdgeDetect(current_primitive_index0, ipos))
            {
                final.rgb = vec3(1, 1, 0.05) * Camera.PaperWhiteNit;
            }
        }
    }

    imageStore(OutImage, ipos, vec4(final.rgb, 1.0));
}