#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "Platform.glsl"
#include "common/Material.glsl"
#include "common/UniformBufferObject.glsl"
#include "common/ColorFunc.glsl"
#include "common/Random.glsl"

layout(binding = 0, rgba8) readonly uniform image2D GBuffer0Image;
layout(binding = 1, rgba16f) readonly uniform image2D GBuffer1Image;
layout(binding = 2, rgba8) readonly uniform image2D GBuffer2Image;
layout(binding = 3, rgba8) writeonly uniform image2D OutImage;
layout(binding = 4) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 5) buffer AmbientCubeArray { AmbientCube[] Cubes; };
//layout(push_constant) uniform PushConsts {
//    uint pingpong;
//    uint stepsize;
//} pushConsts;

#include "common/AmbientCube.glsl"

#if DESKTOP
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
#else
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
#endif

void main() {

    // checker box
    int adder = Camera.TotalFrames % 2 == 0 ? 1 : 0;
    
    ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);
    if(Camera.UseCheckerBoard)
    {
        ipos = ipos * ivec2(2,1);
        if((gl_GlobalInvocationID.y + adder) % 2 == 0) {
            ipos.x += 1;
        }
    }
	
    vec4 albedo = imageLoad(GBuffer0Image, ipos);
    vec4 normalraw = imageLoad(GBuffer1Image, ipos);
    vec4 pbr_param = imageLoad(GBuffer2Image, ipos);
    
    vec3 normal = normalize(normalraw.rgb);

    const float t = 0.5*(normal.y + 1);
    vec4 skyColor = vec4( mix(vec3(1.0), vec3(0.5, 0.7, 1.0) * 20, t), 1.0);

    const vec3 lightVector = Camera.SunDirection.xyz;
    const float d = max(dot(lightVector, normal) * 20.0, 0.5);

    vec4 outColor = albedo * d + skyColor * albedo;
    outColor.rgb = LinearToST2084UE(outColor.rgb * Camera.PaperWhiteNit / 230.0);
    
    imageStore(OutImage, ipos, outColor);
}